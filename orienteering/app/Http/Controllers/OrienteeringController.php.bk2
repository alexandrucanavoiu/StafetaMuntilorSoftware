<?php

namespace App\Http\Controllers;

use App\Models\Orienteering;
use App\Models\Team;
use App\Models\UuidCardOrienteering;
use Illuminate\Http\Request;
use DB;
use Illuminate\Validation\Rule;
use Excel;
use PDF;
use Input;
use App\Models\OrienteeringPosts;

class OrienteeringController extends Controller
{

    public function index() {

        $teams = Team::All()->count();
        $orienteering = Orienteering::All()->count();


        return view('orienteering.index', ['teams' => $teams, 'orienteering' => $orienteering,]);
    }

    public function configure() {

        $nr = 1;
        $orienteering_post_1 = OrienteeringPosts::where('categories_id', 1)->WhereNotIn('post', [251,252])->get();
        $orienteering_post_2 = OrienteeringPosts::where('categories_id', 2)->WhereNotIn('post', [251,252])->get();
        $orienteering_post_3 = OrienteeringPosts::where('categories_id', 3)->WhereNotIn('post', [251,252])->get();
        $orienteering_post_4 = OrienteeringPosts::where('categories_id', 4)->WhereNotIn('post', [251,252])->get();
        $orienteering_post_5 = OrienteeringPosts::where('categories_id', 5)->WhereNotIn('post', [251,252])->get();
        $orienteering_post_6 = OrienteeringPosts::where('categories_id', 6)->WhereNotIn('post', [251,252])->get();
        $orienteering_post_7 = OrienteeringPosts::where('categories_id', 7)->WhereNotIn('post', [251,252])->get();


        return view('orienteering.configure', ['nr' => $nr, 'orienteering_post_1' => $orienteering_post_1, 'orienteering_post_2' => $orienteering_post_2, 'orienteering_post_3' => $orienteering_post_3 , 'orienteering_post_4' => $orienteering_post_4 , 'orienteering_post_5' => $orienteering_post_5 , 'orienteering_post_6' => $orienteering_post_6, 'orienteering_post_7' => $orienteering_post_7]);
    }

    public function configure_store() {


        $categories_id = $_POST['categories_id'];
        DB::table('orienteering_stages')->where('categories_id', $categories_id)->delete();
            $posts = $_POST['post'][$categories_id];

            foreach ($posts as $key => $post_value){
                OrienteeringPosts::insert(
                    ['categories_id' => $categories_id, 'post' => $post_value]
                );
            }
        return redirect('/configure')->with('success', 'Datele au fost salvate' . $categories_id);

    }


    /**
     * Populate Orienteering with data fake to import csv
     */


    public function seedorienteering(){

        $teams = Team::all();

        foreach ($teams as $team) {

            $team_id = $team->team_id;
            $uuid_card = $team->uuid_card;

            $exists = DB::table('orienteering')->where('team_id', $team_id)->first();

            if(!$exists) {

                DB::table('orienteering')
                    ->insert(['team_id' => $team_id, 'uuid_card' => $uuid_card, 'name_participant' => '-', 'start' => '00:00:00', 'finish' => '00:00:00', 'total' => '00:00:00', 'abandon' => 1, 'missed_posts' => 0]);

            }
        }

        return redirect('/import-orienteering')->with('success', 'Tabela pentru proba orientare a fost populata. Acum puteti importa CSV-ul. Atentie daca la o echipa va ramane finish si total 00:00:00 si Abandon inseama ca acesta nu se regaseste in fisierul importat sau a abandonat');

    }

    public function importuuidcardorienteering(Request $request)
    {


        $this->validate($request, [

            'import_file' => 'required'

        ]);

        $uuidlist = UuidCardOrienteering::All();
        $teams = Team::all();

//        $posts[1]= [ 251,31,32,33,252 ]; //Family
//        $posts[2]= [ 251,31,33,33,252 ]; //Juniori
//        $posts[3]= [ 251,31,32,33,34,35,36,252 ]; //Elite
//        $posts[4]= [ 251,31,33,32,252 ]; //Open
//        $posts[5]= [ 251,31,33,32,252 ]; //Veterani
//        $posts[6]= [ 251,31,33,32,252 ]; //Feminin
//        $posts[7]= [ 251,31,33,32,252 ]; //Seniori



        $get_posts = OrienteeringPosts::All();


        foreach ($get_posts as $key => $gets){
            if($gets->categories_id == 1){
                $posts[1][] = $gets->post;
            }
            if($gets->categories_id == 2){
                $posts[2][] = $gets->post;
            }
            if($gets->categories_id == 3){
                $posts[3][] = $gets->post;
            }
            if($gets->categories_id == 4){
                $posts[4][] = $gets->post;
            }
            if($gets->categories_id == 5){
                $posts[5][] = $gets->post;
            }
            if($gets->categories_id == 6){
                $posts[6][] = $gets->post;
            }
            if($gets->categories_id == 7){
                $posts[7][] = $gets->post;
            }
        }


        if (Input::hasFile('import_file')) {
            echo "<pre>";
            $path = Input::file('import_file')->getRealPath();
            $uuid_from_file = "FFFFFFFF";
            if ($file = fopen($path, "r")) {
                while(!feof($file)) {
                    $line = fgets($file);

                    if(substr( $line, 0, 5 ) === "Card:"){

                        $uuid_from_file = substr($line,6,11);
                        $uuid_from_file = str_replace(' ', '', $uuid_from_file);
                        $uuid_from_db = UuidCardOrienteering::where('uuid_name',$uuid_from_file)->first();

                        // Verificare daca UUID-ul exista in baza de date sau asociat unei echipe
                        if(!empty($uuid_from_db)) {
                            $echipa = Team::where('uuid_card',$uuid_from_db['uuid_id'])->first();
                            if($echipa === NULL){
                                echo "<h2><font color='red'><strong>";
                                echo 'EROARE!!! - Ceasul cu numarul ' . $uuid_from_db['uuid_id'] . " nu este asociat nici unei echipe." .  " UUID CARD " . $uuid_from_db['uuid_name'] . ".";
                                echo "<br />";
                                echo "Va rugam sa verificati ceasul si sa il asociati unei echipe sau sa stergeti inregistrarea din fisierul text.";
                                echo "<br />";
                                echo "Importul datelor nu poate fi realizat complet";
                                echo "</stroing></font></h2>";
                                die();
                            }
                        } else {
                            echo "<h2><font color='red'><strong>";
                            echo "Ceasul cu UUID " . $uuid_from_file . " nu exista in baza de date. Ceasul nu se regaseste in LISTA CU UUID-uri.";
                            echo "<br />";
                            echo "Acest ceas este folosit pentru teste? Te rugam sa stergi inregistrarea pentru acest ceas din fisierul text.";
                            echo "<br />";
                            echo "Importul datelor nu poate fi realizat complet";
                            echo "</stroing></font></h2>";
                            die('');
                        }

                        // UUID-uri din fisier ca si categorie echipa

                        $uuid_categorie = $posts[$echipa['category_id']];

                        // Array pentru fiecare UUID
                        $data[$uuid_from_file]=array();
                    } else {
                        // Grupare post/timestamp/data si creare array
                        $parts = explode(",",$line);
                        if(count($parts) == 3){
                            $data[$uuid_from_file][]=array( "post"=> $parts[0], "time" => $parts[1]);
                        }
                    }

                    if(substr( $line, 0, 1 ) === "%"){
                        foreach(array_reverse($data[$uuid_from_file]) as $k=> $v){

                            // Array pentru fiecare card cu post/timp
                            // ---   -- 0 --- 251 --- 1486108800
//                            echo "\n---   -- $k --- ". $v['post']." --- ". $v['time'];
                                $datatmp[$v['post']]=$v['time'];

                        }

                        // Definire variabile
                        $prev_time = 0;
                        $missing= array();
                        $start=0;
                        $finish=0;

                        echo "\n#### Informatii echipa <strong>" . $echipa->team_name . "</strong>, ceas NR. #" . $uuid_from_db['uuid_id'] . ", UUID " . $uuid_from_file .  " ####";
                        echo "<br />";

                        if(!array_key_exists(251,$datatmp)) {
                            $missing[]=251;
                        }

                        if(!array_key_exists(252,$datatmp)) {
                            $missing[]=252;
                        }

                        foreach($uuid_categorie as $key => $post){

                            if( array_key_exists($post,$datatmp)){

                                if($post == 251) { $start = $datatmp[$post]; }
                                if($post == 252) { $finish = $datatmp[$post]; }

                                if($datatmp[$post] < $prev_time){
                                    //echo "\n<font color='red'>Warning...</font> Postul " . $post . " nu a fost validat in ordinea corecta.";
                                    $missing[]=$post;
                                } else {
                                    //echo "\n<font color='green'>OK...</font> Postul " . $post . " a fost validat in ordinea corecta.";
                                }
                                $prev_time=$datatmp[$post];

                            } else {
                                $missing[]=$post;
                                //echo "\n<font color='red'>Warning...</font> Postul " . $post . " nu a fost validat.";
                            }

                        }

                        if(empty($missing)){
                            echo "\n<font color='green'>Au fost validate toate posturile.</font>";
                            $missing_posts = "";
                        } else {
                            $ff[$uuid_from_file] = array_reverse($data[$uuid_from_file]);
                            foreach ($ff[$uuid_from_file] as $key => $f){
                              $a[$uuid_from_file][] = $f['post'];
                            }
                            echo "<font color='red'><strong>Eroare Validare Posturi!!!</strong> \n" . implode(", ", $a[$uuid_from_file]) . "</font>";
                            $missing_posts = implode(", ", $a[$uuid_from_file]);
                        }
                        echo "<br />";
                        echo "\n########################################  END ########################################";
                        echo "<br /><br />";

                        $insert[] = ['uuid_card' => $uuid_from_file, 'start'=>date("H:i:s",$start), 'finish' =>date("H:i:s", $finish), 'total' => date("H:i:s",$finish-$start), 'abandon' => 0, 'missed_posts' => $missing_posts];
                    }

                }
                //var_dump($insert);


                fclose($file);
            }
            echo "<pre>";

            if (!empty($insert)) {


                foreach ($insert as $data) {

                    foreach ($uuidlist as $uuid) {

                        if($data['uuid_card'] === $uuid->uuid_name) {
                           // print_r($uuid->uuid_id);
                            DB::table('orienteering')
                                ->where('uuid_card', $uuid->uuid_id)
                                ->update(['start' => $data['start'], 'finish' => $data['finish'], 'total' => $data['total'], 'abandon' => $data['abandon'], 'missed_posts' => $data['missed_posts']]);
                        }

                    }
                }
                return redirect('/import-orienteering')->with('success', 'UUID Cards from file has imported successed.');

            }

        }
    }



}
